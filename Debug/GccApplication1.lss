
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c6  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000249  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initPorts>:
void initTimers();


void initPorts(){
	//Configuro PIN del LED como salida (PB5 Arduino UNO, PB7 Arduino 2560)
	DDRB = (1 << DDB5); //ASIGNANDO b00100000
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	//DDRB |= (1 << DDB5);//asignando DDRB=DDRB | b00100000

	PORTB |= (1<<PORTB5);
  84:	85 b1       	in	r24, 0x05	; 5
  86:	80 62       	ori	r24, 0x20	; 32
  88:	85 b9       	out	0x05, r24	; 5
  8a:	08 95       	ret

0000008c <initTimers>:
}

void initTimers(){
	TCCR0A=0x00;// modo normal del timer
  8c:	14 bc       	out	0x24, r1	; 36
	TIFR0=TIFR0;
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	85 bb       	out	0x15, r24	; 21
	TCCR0B =0x05;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	85 bd       	out	0x25, r24	; 37
  96:	08 95       	ret

00000098 <main>:
}

int main(void)
{
	uint8_t delayApox250ms;
	initPorts();
  98:	0e 94 40 00 	call	0x80	; 0x80 <initPorts>
	initTimers();
  9c:	0e 94 46 00 	call	0x8c	; 0x8c <initTimers>
    /* Replace with your application code */
    while (1) 
    {
		if(PORTB & (1<<PORTB5))
  a0:	2d 9b       	sbis	0x05, 5	; 5
  a2:	05 c0       	rjmp	.+10     	; 0xae <main+0x16>
			PORTB &= ~(1<< PORTB5);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	85 b9       	out	0x05, r24	; 5
	TIFR0=TIFR0;
	TCCR0B =0x05;
}

int main(void)
{
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	0a c0       	rjmp	.+20     	; 0xc2 <main+0x2a>
    while (1) 
    {
		if(PORTB & (1<<PORTB5))
			PORTB &= ~(1<< PORTB5);
		else
			PORTB |= (1<< PORTB5);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	fa cf       	rjmp	.-12     	; 0xaa <main+0x12>
	
	delayApox250ms=15;
	while(delayApox250ms){
		if(TIFR0 & (1<<TOV0)){
  b6:	a8 9b       	sbis	0x15, 0	; 21
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <main+0x2a>
			TIFR0|=(1<<TOV0);
  ba:	95 b3       	in	r25, 0x15	; 21
  bc:	91 60       	ori	r25, 0x01	; 1
  be:	95 bb       	out	0x15, r25	; 21
			delayApox250ms--;
  c0:	81 50       	subi	r24, 0x01	; 1
			PORTB &= ~(1<< PORTB5);
		else
			PORTB |= (1<< PORTB5);
	
	delayApox250ms=15;
	while(delayApox250ms){
  c2:	81 11       	cpse	r24, r1
  c4:	f8 cf       	rjmp	.-16     	; 0xb6 <main+0x1e>
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0x8>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
